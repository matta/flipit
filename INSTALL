Supported Platforms
===================

Flipit has been reported to compile and run under the following Unix
and Unix-like operating systems:

	Linux
	OpenBSD
	NetBSD

If your operating system is not listed and you get it to work, please
drop me a line at matt@lickey.com.  I am very interested to hear about
both successes and failures.


Basic Installation
==================

The `configure' shell script attempts to guess correct values for
various system-dependent variables used during compilation.  It uses
those values to create a `Makefile' for flipit.  It also creates a
config.h file that is included in each of flipit's source files.
Finally, it creates a shell script `config.status' that you can run in
the future to recreate the current configuration, a file
`config.cache' that saves the results of its tests to speed up
reconfiguring, and a file `config.log' containing compiler output
(useful mainly for debugging `configure').

If you are compiling flipit on a system which it has not been compiled
on before, it may not compile or link on your system.  In this case,
you have probably found a bug.  Please do as much as you can to find
and fix the problem.  If you are not much of a programmer, even
reporting the complete output of the failed configure and compile
steps is helpful.

	     NOTE: If you want to work on this program, please note
	     that the rules for generating the configure.in,
	     Makefile.in and config.h files are disabled by default.
	     Run ./configure with --enable-maintainer-mode to turn
	     them on.

If at some point `config.cache' contains results you don't want to
keep, you may remove or edit it.

The simplest way to compile this package is:

  1. `cd' to the directory containing the package's source code and
     type `./configure' to configure the package for your system.  If
     you're using `csh' on an old version of System V, you might need
     to type `sh ./configure' instead to prevent `csh' from trying to
     execute `configure' itself.

     Running `configure' takes awhile.  While running, it prints some
     messages telling which features it is checking for.

     Flipit has a flipit.conf file.  It will usually go into
     ${prefix}/etc, which usually ends up being /usr/local/etc.  If
     you don't like this, you can pass --sysconfdir to `configure'.
     For example:

     	./configure --sysconfdir=/etc

  2. Type `make' to compile the package.

  3. Figure out which serial port your Firecracker is attached to.
     Some notes on this can be found in the provided flipit.conf file.
     We'll choose /dev/tty00 in this example.  Then pick a lamp to
     turn on and off.  We'll choose lamp 1 in house code A.  Test
     flipit with:

        ./flipit -t /dev/tty00 flip a1 on
        ./flipit -t /dev/tty00 flip a1 off

     If it doesn't work and you are sure you've got the right serial
     port (and permissions to open it), then feel free to e-mail
     me at <matt@lickey.com>.

  4. Edit the supplied flipit.conf and change the tty setting to the
     one you used in the above test.

  5. Type `make install' to install the programs and any data files
     and documentation.  PLEASE take the time to read the `SECURITY'
     file before doing this.

  6. You can remove the program binaries and object files from the
     source code directory by typing `make clean'.  To also remove the
     files that `configure' created (so you can compile the package
     for a different kind of computer), type `make distclean'.  There
     is also a `make maintainer-clean' target, but that is intended
     mainly for the package's developers.  If you use it, you may have
     to get all sorts of other programs in order to regenerate files
     that came with the distribution.

Compilers and Options
=====================

Some systems require unusual options for compilation or linking that
the `configure' script does not know about.  You can give `configure'
initial values for variables by setting them in the environment.
Using a Bourne-compatible shell, you can do that on the command line
like this: CC=c89 CFLAGS=-O2 LIBS=-lposix ./configure

Or on systems that have the `env' program, you can do it like this:
     env CPPFLAGS=-I/usr/local/include LDFLAGS=-s ./configure

Again, if you find you have to do this, please e-mail the maintainer
with the settings you had to use.

Compiling For Multiple Architectures
====================================

You can compile the package for more than one kind of computer at the
same time, by placing the object files for each architecture in their
own directory.  To do this, you must use a version of `make' that
supports the `VPATH' variable, such as GNU `make'.  `cd' to the
directory where you want the object files and executables to go and
run the `configure' script.  `configure' automatically checks for the
source code in the directory that `configure' is in and in `..'.

If you have to use a `make' that does not supports the `VPATH'
variable, you have to compile the package for one architecture at a
time in the source code directory.  After you have installed the
package for one architecture, use `make distclean' before
reconfiguring for another architecture.

Installation Names
==================

By default, `make install' will install the package's files in
`/usr/local/bin', `/usr/local/man', etc.  You can specify an
installation prefix other than `/usr/local' by giving `configure' the
option `--prefix=PATH'.

You can specify separate installation prefixes for
architecture-specific files and architecture-independent files.  If
you give `configure' the option `--exec-prefix=PATH', the package will
use PATH as the prefix for installing programs and libraries.
Documentation and other data files will still use the regular prefix.

In addition, if you use an unusual directory layout you can give
options like `--bindir=PATH' to specify different values for
particular kinds of files.  Run `configure --help' for a list of the
directories you can set and what kinds of files go in them.

If the package supports it, you can cause programs to be installed
with an extra prefix or suffix on their names by giving `configure'
the option `--program-prefix=PREFIX' or `--program-suffix=SUFFIX'.


Sharing Defaults
================

If you want to set default values for `configure' scripts to share,
you can create a site shell script called `config.site' that gives
default values for variables like `CC', `cache_file', and `prefix'.
`configure' looks for `PREFIX/share/config.site' if it exists, then
`PREFIX/etc/config.site' if it exists.  Or, you can set the
`CONFIG_SITE' environment variable to the location of the site script.
A warning: not all `configure' scripts look for a site script.

Operation Controls
==================

   `configure' recognizes the following options to control how it
operates.

`--cache-file=FILE'
     Use and save the results of the tests in FILE instead of
     `./config.cache'.  Set FILE to `/dev/null' to disable caching, for
     debugging `configure'.

`--help'
     Print a summary of the options to `configure', and exit.

`--quiet'
`--silent'
`-q'
     Do not print messages saying which checks are being made.  To
     suppress all normal output, redirect it to `/dev/null' (any error
     messages will still be shown).

`--srcdir=DIR'
     Look for the package's source code in directory DIR.  Usually
     `configure' can determine that directory automatically.

`--version'
     Print the version of Autoconf used to generate the `configure'
     script, and exit.

`configure' also accepts some other, not widely useful, options.
